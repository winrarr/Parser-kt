package parser

sealed class AstNode

sealed class Exp : AstNode()
data class VarExp(val x: String) : Exp()
data class BinOpExp(val leftexp: Exp, val op: BinOp, val rightexp: Exp) : Exp()
data class UnOpExp(val op: UnOp, val exp: Exp) : Exp()
data class IfThenElseExp(val condexp: Exp, val thenexp: Exp, val elseexp: Exp) : Exp()
data class BlockExp(val vals: List<ValDecl>, val vars: List<VarDecl>, val defs: List<DefDecl>, val classes: List<ClassDecl>, val exps: List<Exp>) : Exp()
data class TupleExp(val exps: List<Exp>) : Exp()
data class MatchExp(val exp: Exp, val cases: List<MatchCase>) : Exp()
data class CallExp(val funexp: Exp, val args: List<Exp>) : Exp()
data class LambdaExp(val params: List<FunParam>, val body: Exp) : Exp()
data class AssignmentExp(val x: String, val exp: Exp) : Exp()
data class WhileExp(val cond: Exp, val body: Exp) : Exp()
data class DoWhileExp(val body: Exp, val cond: Exp) : Exp()
data class NewObjExp(val klass: String, val args: List<Exp>) : Exp()
data class LookupExp(val objexp: Exp, val member: String) : Exp()
data class ReturnExp(val exp: Exp) : Exp()

sealed class Literal : Exp()
data class IntLit(val c: Int) : Literal()
data class BoolLit(val c: Boolean) : Literal()
data class FloatLit(val c: Float) : Literal()
data class StringLit(val c: String) : Literal()
object NullLit : Literal()

sealed class BinOp : AstNode()
object PlusBinOp : BinOp()
object MinusBinOp : BinOp()
object MultBinOp : BinOp()
object DivBinOp : BinOp()
object EqualBinOp : BinOp()
object LessThanBinOp : BinOp()
object LessThanOrEqualBinOp : BinOp()
object ModuloBinOp : BinOp()
object MaxBinOp : BinOp()
object AndBinOp : BinOp()
object OrBinOp : BinOp()
object AndAndBinOp : BinOp()
object OrOrBinOp : BinOp()

sealed class UnOp : AstNode()
object NegUnOp : UnOp()
object NotUnOp : UnOp()

sealed class Decl : AstNode()
data class ValDecl(val x: String, val opttype: Type?, val exp: Exp) : Decl()
data class VarDecl(val x: String, val opttype: Type?, val exp: Exp) : Decl()
data class DefDecl(val func: String, val params: List<FunParam>, val optrestype: Type?, val body: Exp) : Decl()
data class ClassDecl(val klass: String, val params: List<FunParam>, val body: BlockExp) : Decl()

class FunParam(x: String, opttype: Type?) : AstNode()

class MatchCase(pattern: List<String>, exp: Exp) : AstNode()

sealed class Type : AstNode()
object IntType : Type()
object BoolType : Type()
object FloatType : Type()
object StringType : Type()
data class TupleType(val types: List<Type>) : Type()
data class FunType(val paramtypes: List<Type>, val restype: Type) : Type()
data class ClassNameType(val klass: String) : Type()
object NullType : Type()